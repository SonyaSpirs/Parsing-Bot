import logging
from telegram import Update
from telegram.ext import ContextTypes, CommandHandler
from bot.keyboards.inline import InlineKeyboards
from bot.keyboards.reply import ReplyKeyboards
from bot.parser.itproger_parser import ITProgerParser
import asyncio

logger = logging.getLogger(__name__)

class UserHandlers:
    def __init__(self, user_articles_manager):
        self.user_articles = user_articles_manager
        self.parser = ITProgerParser()
        self.inline_keyboards = InlineKeyboards(user_articles_manager)
        self.reply_keyboards = ReplyKeyboards()

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        welcome_text = """
ü§ñ **IT News Parser Bot**

–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–∫–∞–∂—É —Ç–µ–±–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ IT –Ω–æ–≤–æ—Å—Ç–∏ —Å itproger.com!

üìö **–ö–æ–º–∞–Ω–¥—ã:**
/news - –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏
/test - —Ç–µ—Å—Ç–æ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏
/help - –ø–æ–º–æ—â—å

üéØ **–ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ /news!**
        """
        await update.message.reply_text(
            welcome_text, 
            parse_mode='Markdown',
            reply_markup=self.reply_keyboards.create_main_menu()
        )

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
üÜò **–ü–æ–º–æ—â—å**

–ï—Å–ª–∏ /news –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:
‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /test - —Ç–µ—Å—Ç–æ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏
‚Ä¢ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç

–ë–æ—Ç –ø–∞—Ä—Å–∏—Ç —Ä–µ–∞–ª—å–Ω—ã–π —Å–∞–π—Ç, –ø–æ—ç—Ç–æ–º—É –º–æ–≥—É—Ç –±—ã—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã.
        """
        await update.message.reply_text(
            help_text,
            parse_mode='Markdown',
            reply_markup=self.reply_keyboards.create_main_menu()
        )

    async def test_news(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏"""
        user_id = update.effective_user.id
        articles = self.parser.create_test_articles()
        self.user_articles[user_id] = articles

        await update.message.reply_text(
            "üß™ **–¢–µ—Å—Ç–æ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏**\n\n–ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞:",
            parse_mode='Markdown',
            reply_markup=self.reply_keyboards.create_news_menu()
        )

        for i, article in enumerate(articles):
            message_text = self._format_article_preview(article, i)
            keyboard = self.inline_keyboards.create_article_preview_keyboard(i, user_id)

            await update.message.reply_text(
                message_text,
                reply_markup=keyboard,
                parse_mode='Markdown'
            )
            await asyncio.sleep(0.3)

    async def show_news(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏"""
        user_id = update.effective_user.id

        loading_msg = await update.message.reply_text("üîÑ –ó–∞–≥—Ä—É–∂–∞—é —Å–≤–µ–∂–∏–µ IT –Ω–æ–≤–æ—Å—Ç–∏...")

        try:
            html_content = self.parser.get_news_page()

            if not html_content:
                await loading_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–∞–π—Ç—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /test")
                return

            articles = self.parser.parse_articles_simple(html_content)

            if not articles:
                await loading_msg.edit_text("üì≠ –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω–æ–≤–æ—Å—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /test")
                return

            self.user_articles[user_id] = articles
            await loading_msg.delete()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—å–∏ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
            for i, article in enumerate(articles):
                message_text = self._format_article_preview(article, i)
                keyboard = self.inline_keyboards.create_article_preview_keyboard(i, user_id)

                await update.message.reply_text(
                    message_text,
                    reply_markup=keyboard,
                    parse_mode='Markdown'
                )
                await asyncio.sleep(0.5)

            await update.message.reply_text(
                "‚úÖ –ì–æ—Ç–æ–≤–æ! –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—å—é –¥–ª—è —á—Ç–µ–Ω–∏—è.",
                parse_mode='Markdown',
                reply_markup=self.reply_keyboards.create_news_menu()
            )

        except Exception as e:
            logger.error(f"Error in show_news: {e}")
            await loading_msg.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /test")

    def _format_article_preview(self, article: dict, index: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–≤—å—é —Å—Ç–∞—Ç—å–∏"""
        return f"""
üì∞ **{article['title']}**

{article['description']}

*–°—Ç–∞—Ç—å—è {index + 1} - –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ*
        """.strip()

    def get_handlers(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        return [
            CommandHandler("start", self.start),
            CommandHandler("news", self.show_news),
            CommandHandler("help", self.help_command),
            CommandHandler("test", self.test_news),
        ]
