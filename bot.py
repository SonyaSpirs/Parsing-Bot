import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
from config import BOT_TOKEN
from parser import ITProgerParser
import html

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)


class ITProgerBot:
    def __init__(self):
        self.parser = ITProgerParser()
        self.user_data = {}  # –•—Ä–∞–Ω–∏–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        welcome_text = f"""
üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!

ü§ñ –Ø –±–æ—Ç –¥–ª—è —á—Ç–µ–Ω–∏—è IT —Å—Ç–∞—Ç–µ–π —Å itproger.com/news

üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/news - –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç–∞—Ç—å–∏
/next - –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
/prev - –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞

üéõÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏!
        """

        # Reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        reply_keyboard = [
            ["üì∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏"],
            ["‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞", "‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"],
            ["‚ÑπÔ∏è –ü–æ–º–æ—â—å"]
        ]

        await update.message.reply_text(
            welcome_text,
            reply_markup=ReplyKeyboardMarkup(
                reply_keyboard,
                resize_keyboard=True,
                input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ..."
            )
        )

    async def show_news(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏"""
        user_id = update.effective_user.id

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id not in self.user_data:
            self.user_data[user_id] = {'current_page': 1}

        await self._send_articles(update, context, page=1)

    async def next_page(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
        user_id = update.effective_user.id

        if user_id not in self.user_data:
            self.user_data[user_id] = {'current_page': 1}

        current_page = self.user_data[user_id]['current_page']
        next_page = current_page + 1

        await self._send_articles(update, context, page=next_page)

    async def prev_page(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
        user_id = update.effective_user.id

        if user_id not in self.user_data:
            self.user_data[user_id] = {'current_page': 1}

        current_page = self.user_data[user_id]['current_page']
        prev_page = max(1, current_page - 1)

        await self._send_articles(update, context, page=prev_page)

    async def _send_articles(self, update: Update, context: ContextTypes.DEFAULT_TYPE, page: int):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—å–∏ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        user_id = update.effective_user.id

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        self.user_data[user_id]['current_page'] = page

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—å–∏
        articles = self.parser.get_articles(page)

        if not articles:
            await update.message.reply_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç—å–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            return

        # –ò–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        nav_buttons = []
        if page > 1:
            nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"prev_{page}"))
        nav_buttons.append(InlineKeyboardButton("‚û°Ô∏è –í–ø–µ—Ä–µ–¥", callback_data=f"next_{page}"))

        navigation = [nav_buttons] if nav_buttons else []

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —Å—Ç–∞—Ç—å—é –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        for i, article in enumerate(articles, 1):
            message_text = self._format_article_message(article, i, page)

            # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Å—Ç–∞—Ç—å–∏
            article_buttons = [
                [
                    InlineKeyboardButton("üìñ –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç", callback_data=f"full_{article['link']}"),
                    InlineKeyboardButton("üîó –û—Ç–∫—Ä—ã—Ç—å —Å—Ç–∞—Ç—å—é", url=article['link'])
                ]
            ]

            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç–∞—Ç—å–µ
            if i == len(articles):
                article_buttons.extend(navigation)

            reply_markup = InlineKeyboardMarkup(article_buttons)

            try:
                if article['image_url']:
                    await update.message.reply_photo(
                        photo=article['image_url'],
                        caption=message_text,
                        reply_markup=reply_markup,
                        parse_mode='HTML'
                    )
                else:
                    await update.message.reply_text(
                        message_text,
                        reply_markup=reply_markup,
                        parse_mode='HTML'
                    )
            except Exception as e:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                await update.message.reply_text(
                    message_text,
                    reply_markup=reply_markup,
                    parse_mode='HTML'
                )

    def _format_article_message(self, article, index, page):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç—å–µ–π"""
        title = html.escape(article['title'])
        description = html.escape(article['description'])

        return f"""
üì∞ <b>{title}</b>

üìù {description}

üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞: {page} | –°—Ç–∞—Ç—å—è: {index}
        """

    async def button_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()

        data = query.data

        if data.startswith('full_'):
            # –ö–Ω–æ–ø–∫–∞ "–ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç"
            article_url = data[5:]
            full_content = self.parser.get_full_content(article_url)

            if full_content:
                # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML —Å–∏–º–≤–æ–ª—ã –¥–ª—è Markdown
                content = html.escape(full_content)
                message = f"üìñ <b>–ü–æ–ª–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ:</b>\n\n{content}"
            else:
                message = "‚è≥ <b>–°–∫–æ—Ä–æ!</b>\n\n–ü–æ–ª–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç–∞—Ç—å–∏ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."

            await query.edit_message_caption(
                caption=query.message.caption + f"\n\n{message}" if query.message.caption else message,
                parse_mode='HTML'
            )

        elif data.startswith('next_'):
            # –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
            current_page = int(data[5:])
            user_id = query.from_user.id
            self.user_data[user_id] = {'current_page': current_page + 1}

            articles = self.parser.get_articles(current_page + 1)
            if articles:
                await self._edit_message_with_articles(query, articles, current_page + 1)
            else:
                await query.edit_message_caption(
                    caption="‚ùå –ë–æ–ª—å—à–µ —Å—Ç–∞—Ç–µ–π –Ω–µ—Ç",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"prev_{current_page}")]
                    ])
                )

        elif data.startswith('prev_'):
            # –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
            current_page = int(data[5:])
            prev_page = max(1, current_page - 1)
            user_id = query.from_user.id
            self.user_data[user_id] = {'current_page': prev_page}

            articles = self.parser.get_articles(prev_page)
            await self._edit_message_with_articles(query, articles, prev_page)

    async def _edit_message_with_articles(self, query, articles, page):
        """–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º–∏ —Å—Ç–∞—Ç—å—è–º–∏"""
        if not articles:
            await query.edit_message_caption(
                caption="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç—å–∏",
                reply_markup=None
            )
            return

        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é —Å—Ç–∞—Ç—å—é –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        article = articles[0]
        message_text = self._format_article_message(article, 1, page)

        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        nav_buttons = []
        if page > 1:
            nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"prev_{page}"))
        nav_buttons.append(InlineKeyboardButton("‚û°Ô∏è –í–ø–µ—Ä–µ–¥", callback_data=f"next_{page}"))

        reply_markup = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("üìñ –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç", callback_data=f"full_{article['link']}"),
                InlineKeyboardButton("üîó –û—Ç–∫—Ä—ã—Ç—å —Å—Ç–∞—Ç—å—é", url=article['link'])
            ],
            nav_buttons
        ])

        try:
            if query.message.photo:
                await query.edit_message_caption(
                    caption=message_text,
                    reply_markup=reply_markup,
                    parse_mode='HTML'
                )
            else:
                await query.edit_message_text(
                    message_text,
                    reply_markup=reply_markup,
                    parse_mode='HTML'
                )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    async def handle_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        text = update.message.text

        if text == "üì∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏":
            await self.show_news(update, context)
        elif text == "‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞":
            await self.next_page(update, context)
        elif text == "‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞":
            await self.prev_page(update, context)
        elif text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å":
            await self.help_command(update, context)
        else:
            await update.message.reply_text(
                "ü§î –ù–µ –ø–æ–Ω–∏–º–∞—é –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã –∏–∑ –º–µ–Ω—é."
            )

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É"""
        help_text = """
üìö <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>

<b>–ö–æ–º–∞–Ω–¥—ã:</b>
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/news - –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç–∞—Ç—å–∏
/next - –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞  
/prev - –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

<b>–ö–Ω–æ–ø–∫–∏:</b>
üìñ –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç - –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç–∞—Ç—å–∏
üîó –û—Ç–∫—Ä—ã—Ç—å —Å—Ç–∞—Ç—å—é - –û—Ç–∫—Ä—ã—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª –Ω–∞ itproger.com
‚¨ÖÔ∏è/‚û°Ô∏è - –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º

<b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞ Markdown:</b>
–ë–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞ —á–µ—Ä–µ–∑ Markdown
        """
        await update.message.reply_text(help_text, parse_mode='HTML')


def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    bot = ITProgerBot()

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", bot.start))
    application.add_handler(CommandHandler("news", bot.show_news))
    application.add_handler(CommandHandler("next", bot.next_page))
    application.add_handler(CommandHandler("prev", bot.prev_page))
    application.add_handler(CommandHandler("help", bot.help_command))

    application.add_handler(CallbackQueryHandler(bot.button_handler))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, bot.handle_text))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    application.run_polling()


if __name__ == '__main__':
    main()