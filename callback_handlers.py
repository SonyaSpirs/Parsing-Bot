import logging
from telegram import Update
from telegram.ext import ContextTypes, CallbackQueryHandler
from bot.keyboards.inline import InlineKeyboards
from bot.parser.itproger_parser import ITProgerParser
import asyncio

logger = logging.getLogger(__name__)

class CallbackHandlers:
    def __init__(self, user_articles_manager):
        self.user_articles = user_articles_manager
        self.parser = ITProgerParser()
        self.inline_keyboards = InlineKeyboards(user_articles_manager)

    async def handle_button(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()

        user_id = query.from_user.id
        data = query.data

        try:
            if data.startswith("brief_"):
                article_index = int(data.split("_")[1])
                await self.show_article_content(query, context, article_index, user_id)

            elif data == "back_to_list":
                await query.edit_message_text(
                    "‚Ü©Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /news –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å–ø–∏—Å–∫–∞ —Å—Ç–∞—Ç–µ–π!",
                    parse_mode='Markdown'
                )

        except Exception as e:
            logger.error(f"Error in handle_button: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    async def show_article_content(self, query, context: ContextTypes.DEFAULT_TYPE, article_index: int, user_id: int):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç–∞—Ç—å–∏"""
        try:
            if user_id not in self.user_articles or article_index >= len(self.user_articles[user_id]):
                await query.edit_message_text("‚ùå –°—Ç–∞—Ç—å—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /news")
                return

            article = self.user_articles[user_id][article_index]

            await query.edit_message_text(f"üìñ –ó–∞–≥—Ä—É–∂–∞—é: {article['title']}...")

            full_content = self.parser.get_article_full_content(article['link'])
            message_text = f"**{article['title']}**\n\n{full_content}"

            keyboard = self.inline_keyboards.create_article_content_keyboard(article_index, user_id)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
            if len(message_text) > 4096:
                part1 = message_text[:4000]
                part2 = message_text[4000:]

                await query.edit_message_text(part1, parse_mode='Markdown')
                await context.bot.send_message(
                    chat_id=query.message.chat_id,
                    text=part2,
                    reply_markup=keyboard,
                    parse_mode='Markdown'
                )
            else:
                await query.edit_message_text(
                    text=message_text,
                    reply_markup=keyboard,
                    parse_mode='Markdown'
                )

        except Exception as e:
            logger.error(f"Error showing article: {e}")
            await query.edit_message_text(
                text=f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç—å—é.\n\nüìñ –ß–∏—Ç–∞–π—Ç–µ –Ω–∞ —Å–∞–π—Ç–µ: {article['link']}",
                parse_mode='Markdown'
            )

    def get_handlers(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ callback'–æ–≤"""
        return [
            CallbackQueryHandler(self.handle_button, pattern="^(brief_|back_|site_)")
        ]
