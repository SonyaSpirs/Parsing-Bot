import json
import re
import socketserver
import urllib.request
import urllib.parse
import html
import ssl
import http.server


class TelegramBot:
    def __init__(self, token):
        self.token = token
        self.base_url = f"https://api.telegram.org/bot{token}/"

    def send_message(self, chat_id, text):
        url = self.base_url + "sendMessage"
        data = {
            "chat_id": chat_id,
            "text": text,
            "parse_mode": "HTML"
        }
        self._make_request(url, data)

    def _make_request(self, url, data):
        try:
            data_bytes = urllib.parse.urlencode(data).encode('utf-8')
            context = ssl._create_unverified_context()
            req = urllib.request.Request(url, data=data_bytes)
            response = urllib.request.urlopen(req, context=context)
            return response.read().decode('utf-8')
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            return None


class ArticleParser:
    @staticmethod
    def parse_article(url):
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Ç–æ–∫–æ–ª –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if not url.startswith(('http://', 'https://')):
                url = 'https://' + url

            context = ssl._create_unverified_context()
            req = urllib.request.Request(
                url,
                headers={
                    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
                }
            )
            response = urllib.request.urlopen(req, context=context)
            html_content = response.read().decode('utf-8')

            return ArticleParser._extract_content(html_content)

        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: {str(e)}"

    @staticmethod
    def _extract_content(html_content):
        # –£–¥–∞–ª—è–µ–º —Å–∫—Ä–∏–ø—Ç—ã –∏ —Å—Ç–∏–ª–∏
        html_content = re.sub(r'<script.*?</script>', '', html_content, flags=re.DOTALL)
        html_content = re.sub(r'<style.*?</style>', '', html_content, flags=re.DOTALL)

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        title_match = re.search(r'<title[^>]*>(.*?)</title>', html_content, re.IGNORECASE | re.DOTALL)
        title = title_match.group(1).strip() if title_match else "–ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω"
        title = ArticleParser._clean_text(title)

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Ç–∞-–æ–ø–∏—Å–∞–Ω–∏–µ
        description_match = re.search(r'<meta[^>]*name=["\']description["\'][^>]*content=["\'](.*?)["\']', html_content, re.IGNORECASE)
        description = description_match.group(1).strip() if description_match else ""
        description = ArticleParser._clean_text(description)

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
        content = ArticleParser._extract_main_content(html_content)

        result = f"<b>üì∞ –ó–∞–≥–æ–ª–æ–≤–æ–∫:</b>\n{title}\n\n"
        if description:
            result += f"<b>üìù –û–ø–∏—Å–∞–Ω–∏–µ:</b>\n{description}\n\n"
        result += f"<b>üìÑ –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:</b>\n{content}"

        return result

    @staticmethod
    def _extract_main_content(html_content):
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ç–µ–≥–∏, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
        text = re.sub(r'<[^>]+>', ' ', html_content)
        text = ArticleParser._clean_text(text)

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞ –¥–ª—è Telegram
        if len(text) > 3000:
            text = text[:3000] + "..."

        return text

    @staticmethod
    def _clean_text(text):
        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º HTML-—Å—É—â–Ω–æ—Å—Ç–∏
        text = html.unescape(text)
        # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã
        text = re.sub(r'\s+', ' ', text)
        text = text.strip()
        return text


class BotHandler(http.server.SimpleHTTPRequestHandler):
    def do_GET(self):
        if self.path == '/':
            self.send_response(200)
            self.send_header('Content-type', 'text/html; charset=utf-8')
            self.end_headers()
            self.wfile.write(b'Bot @parsing07_bot is running!')
        else:
            self.send_response(404)
            self.end_headers()

    def do_POST(self):
        if self.path == '/webhook':
            content_length = int(self.headers['Content-Length'])
            post_data = self.rfile.read(content_length)
            self._handle_update(post_data.decode('utf-8'))
        else:
            self.send_response(404)
            self.end_headers()

    def _handle_update(self, data):
        try:
            update = json.loads(data)
            if 'message' in update:
                message = update['message']
                chat_id = message['chat']['id']
                text = message.get('text', '')

                bot = TelegramBot("8453465834:AAEdzYPmtmjayAtTfhitVaiiA3aBtELRDQY")
                parser = ArticleParser()

                if text.startswith('/start'):
                    bot.send_message(chat_id,
                                     "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç @parsing07_bot –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç–∞—Ç–µ–π.\n\n"
                                     "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç–∞—Ç—å—é, –∏ —è –∏–∑–≤–ª–µ–∫—É –∏–∑ –Ω–µ–µ —Ç–µ–∫—Å—Ç!\n\n"
                                     "üìù <b>–ü—Ä–∏–º–µ—Ä:</b>\nhttps://example.com/article")


                elif text.startswith('/help'):
                    bot.send_message(chat_id,
                                     "üìñ <b>–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É:</b>\n\n"
                                     "‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç–∞—Ç—å—é –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞\n"
                                     "‚Ä¢ –ë–æ—Ç –∏–∑–≤–ª–µ—á–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç\n"
                                     "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–Ω—ã—Ö —Å–∞–π—Ç–æ–≤\n\n"
                                     "üöÄ <b>–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –∏ –ø–æ–ª—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç!</b>")

                elif self._is_url(text):
                    bot.send_message(chat_id, "‚è≥ –ü–∞—Ä—Å–∏–º —Å—Ç–∞—Ç—å—é...")
                    article_content = parser.parse_article(text)
                    bot.send_message(chat_id, article_content)

                else:
                    bot.send_message(chat_id,
                                     "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞–ª–∏–¥–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç–∞—Ç—å—é.\n\n"
                                     "<b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
                                     "‚Ä¢ https://example.com/news/article\n"
                                     "‚Ä¢ www.example.com/blog/post\n\n"
                                     "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.")

        except json.JSONDecodeError:
            print("–û—à–∏–±–∫–∞: –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º JSON")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    def _is_url(self, text):
        url_patterns = [
            r'^https?://[^\s/$.?#].[^\s]*$',
            r'^www\.[^\s/$.?#].[^\s]*$'
        ]
        return any(re.match(pattern, text) for pattern in url_patterns)


def set_webhook(token, webhook_url):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook"""
    bot = TelegramBot(token)
    url = f"https://api.telegram.org/bot{token}/setWebhook"
    data = {"url": webhook_url}
    result = bot._make_request(url, data)
    print(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {result}")


def main():
    PORT = 8080
    TOKEN = "8453465834:AAEdzYPmtmjayAtTfhitVaiiA3aBtELRDQY"

    print(f"üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ @parsing07_bot –Ω–∞ –ø–æ—Ä—Ç—É {PORT}")
    print("–ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")

    # –ó–∞–ø—É—Å–∫ HTTP —Å–µ—Ä–≤–µ—Ä–∞
    with socketserver.TCPServer(("", PORT), BotHandler) as httpd:
        print(f"‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:{PORT}")
        print("üìù –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–∞ —Ö–æ—Å—Ç–∏–Ω–≥–µ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ webhook")
        try:
            httpd.serve_forever()
        except KeyboardInterrupt:
            print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")


if __name__ == "__main__":
    main()